/*
Author: Mitko Ivanov
Class: GPR-200-01/02/03: Introduction to Modern Graphics Programming
Assignment: Midterm Project
Date Assigned: 10/16/2020
Due Date: 10/30/2020
Description: Use Shadertoy to Experiment with all tequniques we have learned in GLSL so far
Certification of Authenticity:
I certify that this is entirely my own work, except where I have given
fully-documented references to the work of others. I understand the
definition and consequences of plagiarism and acknowledge that the assessor
of this assignment may, for the purpose of assessing this assignment:
- Reproduce this assignment and provide a copy to another member of
academic staff; and/or
- Communicate a copy of this assignment to a plagiarism checking
service (which may then retain a copy of this assignment on its
database for the purpose of future plagiarism checking)

Using influence from:

- "The OpenGLÂ® Shading Language, Version 4.60.7" by John Kessenich, Google (Editor and Author) ; Dave Baldwin and Randi Rost
https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.60.pdf


*/

//BUFFER A


vec2 rotation(vec2 p, float angle) {
 
    angle = radians(angle);
    float s = sin(angle);
    float c = cos(angle);
    
    mat2 rotMax = mat2(c,s,-s,c);
    
    return p * rotMax;
    
}

color4 calcColor(in sViewport vp, in sRay ray, in sCoord fragCoord)
{
    vec2 uv = (fragCoord.xy - iResolution.xy * .5) / iResolution.y;
    vec2  mouse = (iMouse.xy / iResolution.xy);
    
    vec3 dir = vec3(uv, 1.0);
    
    dir.xz = rotation(dir.xz, 190.0 * -mouse.x);
    
    return texture(iChannel0, dir); 
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor = calcColor(vp, ray, fragCoord);
   
    
}