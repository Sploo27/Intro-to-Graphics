/*
Author: Mitko Ivanov
Class: GPR-200-01/02/03: Introduction to Modern Graphics Programming
Assignment: Lab 4: Textures
Date Assigned: 09/25/2020
Due Date: 10/02/2020
Description: Use Shadertoy to follow allong given algorithms to learn about textures in GLSL
Certification of Authenticity:
I certify that this is entirely my own work, except where I have given
fully-documented references to the work of others. I understand the
definition and consequences of plagiarism and acknowledge that the assessor
of this assignment may, for the purpose of assessing this assignment:
- Reproduce this assignment and provide a copy to another member of
academic staff; and/or
- Communicate a copy of this assignment to a plagiarism checking
service (which may then retain a copy of this assignment on its
database for the purpose of future plagiarism checking)

Using influence from:

- "The OpenGLÂ® Shading Language, Version 4.60.7" by John Kessenich, Google (Editor and Author) ; Dave Baldwin and Randi Rost
https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.60.pdf

-https://www.shadertoy.com/view/MdKGzG (cube-map camera)

-https://www.shadertoy.com/view/MtfczX (barrel distortion)

- Given code from the Lab 4: Lighting assignment page in canvas


*/

// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}
sScalar lengthSq(float x)
{
    return dot(x, x);
}


float power(in float base, in float ex)
{
    for(float i = 0.0; i < ex; ++i)
    {
        base *= base;
    }
    return base;
}

//cross-fade function
vec4 crossFade(vec4 image1, vec4 image2)
{
    float fade = (sin(iTime) * 0.5) + 0.5;
    return mix(image1, image2, fade);
}


//barrel distortion function
vec2 barrelDistortion(vec2 uv)
{
    float theta = atan(uv.y, uv.x); //arc tan
    float radius = length(uv);
    
    radius = power(radius, 1.0);
    
    uv.x = radius * cos(theta);
    uv.y = radius * sin(theta);
    
    return uv;
} //reference: https://www.shadertoy.com/view/MtfczX

struct pointLight
{
    vec4 center;
    vec4 color;
    float intensity;
};
    

void initPointLight(out pointLight pLight, in vec3 center, in vec4 color, in float intensity)
{
    pLight.center = asPoint(center);
    pLight.color = color;
    pLight.intensity = intensity;
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray(all rays are parallel)
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}


//------------------------------------------------------------
// RENDERING FUNCTIONS

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    //return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
    //return vp.viewportPoint;
    
    // const color
    //return vec4(1.0, 0.0, 0.0, 1.0);
    
    //texture (full-screen)
    //sampler2D tex = iChannel0; //cant declare in-line
    //sCoord loc = vp.uv; //relative to display(output)
    
    sCoord px = vp.pixelCoord;
    sCoord res = iChannelResolution[0].xy;
    sCoord loc = px / res;
   
    
    //calls distortion function
    //loc = barrelDistortion(loc);
    
    sScalar ratio = res.y * vp.resolutionInv.y;
    loc = loc * ratio + 0.1 * iTime; //zooming out
    
    //calling the crossfade function
    vec4 crossFadeImage = crossFade(texture(iChannel2, loc), texture(iChannel0, loc));
    //return crossFadeImage; 
    
    //this makes it so the value doesn't go below zero
    float lightPositionX = (sin(iTime) * 0.5) + 0.5;
    float lightPositionY = (cos(iTime) * 0.5) + 0.5;
    
    //initializing the light
    pointLight light;
    initPointLight(light, vec3(lightPositionX, lightPositionY, 0), crossFadeImage, 100.0); 
    
    vec2 lightVector = light.center.xy - vp.uv;
    vec2 normalLightVector = lightVector * inversesqrt(lengthSq(lightVector));
    
    //calculations for lambertian reflectance
    float diffusionCoef = max(0.0, (dot(vp.uv, normalLightVector)));
    float attenuation = 1.0/(1.0 + length(lightVector)/light.intensity + (lengthSq(length(lightVector)) ) / (lengthSq(light.intensity)));
    float diffuseIntensity = diffusionCoef * attenuation;
    
    //return crossFadeImage * diffuseIntensity;
    
    //cube map
    //sampler type: samplerCube
    
    vp.uv = 2.0 * vp.pixelCoord/iResolution.xy - 1.0;
    vp.uv = barrelDistortion(vp.uv);
    vp.uv.x *= (iResolution.x / iResolution.y);
    vec3 cam = normalize(vec3(vp.uv.x, vp.uv.y, 1.0));
    
    float time = 0.2 * iTime;
    
    cam.xz += vec2(sin(time), cos(time));
    //reference: https://www.shadertoy.com/view/MdKGzG
    
    
    return texture(iChannel1, cam);
    
    //return texture(iChannel0, loc); //full rgba
    //return texture(iChannel0, loc).rrrr; //greyscale(swizzling)
    
    
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}