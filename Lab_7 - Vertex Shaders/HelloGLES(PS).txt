#version 300 es
//version 450 

/*
Author: Mitko Ivanov
Class: GPR-200-01/02/03: Introduction to Modern Graphics Programming
Assignment: Lab 7: Vertex Shaders
Date Assigned: 10/30/2020
Due Date: 111/6/2020
Description: Use SHADERed as well as material given to learn about vertex shaders
Certification of Authenticity:
I certify that this is entirely my own work, except where I have given
fully-documented references to the work of others. I understand the
definition and consequences of plagiarism and acknowledge that the assessor
of this assignment may, for the purpose of assessing this assignment:
- Reproduce this assignment and provide a copy to another member of
academic staff; and/or
- Communicate a copy of this assignment to a plagiarism checking
service (which may then retain a copy of this assignment on its
database for the purpose of future plagiarism checking)

Using influence from:

- Given code from the Lab 7: Intro to Vertex Shaders & Transformations assignment page in canvas


*/

#ifdef GL_ES
precision highp float;
#endif //GL_ES

layout(location = 0) out vec4 rtFragColor;
//out vec4 rtFragColor;

//VARYING

//PER-VERTEX: final color inbound
in vec4 vColor;

//PER-FRAGMENT: pass requirements for final color
in vec4 vNormal;

//Lighting PER-FRAGMENT
in vec3 vLightVector;

//in vec2 vTexcoord;
in vec4 vTexcoord;

//OPTIMIZATION
float power(in float base, in int ex)
{
    for(int i = 0; i < ex; ++i)
    {
        base *= base;
    }
    return base;
}

void main()
{
	//rtFragColor = vec4(0.5, 1.0, 0.0, 1.0);
	
	//PER-VERTEX: just display the final color from VS
	//rtFragColor = vColor;
	
	//PER-FRAGMENT: calculate and display
	vec4 N = normalize(vNormal);
	//rtFragColor = vec4(N.xyz * 0.5 + 0.5, 1.0);
	
	//LIGHTING
	vec3 viewVector = normalize(vColor.xyz);//issues
    vec3 reflectedLightVector = reflect(-normalize(vLightVector), vec3(0.0));
    float specularCoef = max(0.0, dot(viewVector, reflectedLightVector));
    
    int highlightExponent = 1;
    
    float specularFocus = power(specularCoef, highlightExponent);
    
    
	vec4 specularColor = vec4(1.0);
	
	//Per-vertex
	rtFragColor = vColor;
	
	//Per-fragment
	//rtFragColor = specularColor * specularFocus;
	
	
	//rtFragColor = vec4(vTexcoord, 0.0, 1.0);
	//rtFragColor = vTexcoord;
}
