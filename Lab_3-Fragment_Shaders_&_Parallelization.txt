/*
Author: Mitko Ivanov
Class: GPR-200-01/02/03: Introduction to Modern Graphics Programming
Assignment: Lab 3: Fragment Shaders & Parallelization
Date Assigned: 09/18/2020
Due Date: 09/25/2020
Description: Use Shadertoy to continue work with "Ray Tracing in One Weekend"
Certification of Authenticity:
I certify that this is entirely my own work, except where I have given
fully-documented references to the work of others. I understand the
definition and consequences of plagiarism and acknowledge that the assessor
of this assignment may, for the purpose of assessing this assignment:
- Reproduce this assignment and provide a copy to another member of
academic staff; and/or
- Communicate a copy of this assignment to a plagiarism checking
service (which may then retain a copy of this assignment on its
database for the purpose of future plagiarism checking)

Using influence from:
-"Ray Tracing in One Weekend" by Peter Shirley
https://raytracing.github.io/books/RayTracingInOneWeekend.html#overview

- "The OpenGLÂ® Shading Language, Version 4.60.7" by John Kessenich, Google (Editor and Author) ; Dave Baldwin and Randi Rost
https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.60.pdf

- Given code from the Lab 3: Fragment Shaders & Parallelization assignment page in canvas


*/



// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}

/*
struct hit_record
{
    vec3 p, normal;
    float t;
};


struct sphere
{
    bool hit(vec4 rayDirection, float tmin, float tmax, hit_record rec);
    
    
	vec3 center;
    float radius;
};

bool hit(vec4 rayDirection, float tmin, float tmax, hit_record rec)
{
	vec4 oc = rayOrigin - center;
    float a = dot(rayDirection, rayDirection);
    float b = 2.0 * dot(oc, rayDirection);
    float c = dot(oc, oc) - radius*radius;
    float discriminant = b*b - 4.0*a*c;
	
	if(discriminant > 0)
	{
		float root = sqrt(discriminant);
		
		float temp =(b(0.5)) - root) / a;
		if(temp < tmax && temp > tmin)
		{
			rec.t = temp;
			rec.p = rayDirection.y;
			rec.normal = (rec.p - center) / radius;
			return true;
		}
		
		float root = sqrt(discriminant);
		
		float temp =(b(0.5)) + root) / a;
		if(temp < tmax && temp > tmin)
		{
			rec.t = temp;
			rec.p = rayDirection.y;
			rec.normal = (rec.p - center) / radius;
			return true;
		}
	}
	return false;
}

*/

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}


//bool
float hit_sphere(const vec4 center, float radius, const vec4 rayDirection, const vec4 rayOrigin) //code translated from "Ray Tracing in One Weekend" by Peter Shirley
{
    vec4 oc = rayOrigin - center; // using rayOrigin instead of r.origin()
    float a = dot(rayDirection, rayDirection);//using ray direction instead of r.direction()
    float b = 2.0 * dot(oc, rayDirection);
    float c = dot(oc, oc) - radius*radius;
    float discriminant = b*b - 4.0*a*c;
    
    
    
    if(discriminant < 0.0)
    {
        return -1.0;
    }
    else
    {
        return sin(iTime + (-b - sqrt(discriminant)) * (0.5*a));//don't know of an alternative to using sqrt here
    }            //using sin and iTime to add some cool animation

}
    

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)//code translated from "Ray Tracing in One Weekend" by Peter Shirley
{
    float t = hit_sphere(vec4(0.0,0.0,-1.0,1.0), 0.5, rayDirection, rayOrigin);
    if(t > 0.0)
    {
        vec4 N = vec4(rayDirection*t - vec4(0.0,0.0,-1.0,1.0));
        return 0.5*vec4(N.x + 1.0, N.y + 1.0, N.z + 1.0, 1.0);
    }
   
    t = 0.5*rayDirection.y + 1.0;
    
    return (1.0-t)*vec4(1.0, 1.0, 1.0, 1.0) + t*vec4(0.5, 0.7, 1.0, 1.0);
}




// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);

    // color
    fragColor = calcColor(rayDirection, rayOrigin);

    // TEST COLOR:
    //  -> what do the other things calculated above look like?
    //fragColor = vec4(viewport, 0.0, 0.0);
    //fragColor = vec4(ndc, 0.0, 0.0);
    //fragColor = vec4(uv, 0.0, 0.0);
    
    
}   