
// using color = vec3;
#define colorRGB    vec3;
#define colorRGBA   vec4;

vec4 myEffect0(in vec2 fragCoord)
{
    
    
    vec2 uv = fragCoord / iResolution.xy;
    
    //vec3 color = vec3(uv, 0.0);
    vec3 color = 0.5 + 0.5*sin(iTime+uv.yxy+vec3(2,4,6));
	
    float alpha = 1.0;
    
    //return vec4(1.0, 0.5, 0.0, 1.0);	
    return vec4(color, alpha);
    
}



float makeCheckerboard(vec2 fragCoord)
{
    float tileSize = 10.0f; // controls the amount of pixels per block
	float tileNumber = 10.0f;
	float modNum = 1.5f;
	vec4 color = vec4(1.0, 1.0, 1.0, 1.0); 	//Default color
    
    vec2 uv = fragCoord/iResolution.xy;
	vec2 tile = floor(fragCoord / tileSize);		// Controls the size of the tile
    float pat = mod(tile.x + tile.y, modNum);		// Controls the actual pattern displayed
    return pat;
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    fragColor = makeCheckerboard(fragCoord) * myEffect0(fragCoord);  //creates a checkerboard over
    																 //the gradient
    
    
    /*
    //Normalized pixel coordinates (from 0 to 1)
    uv = fragCoord/iResolution.xy;

    // Time varying pixel color
    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    fragColor = pat * vec4(col,1.0);
	*/
}