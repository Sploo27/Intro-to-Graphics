/*
Author: Mitko Ivanov
Class: GPR-200-01/02/03: Introduction to Modern Graphics Programming
Assignment: Lab 6: Post-Processing
Date Assigned: 10/09/2020
Due Date: 10/16/2020
Description: Use Shadertoy to follow allong given algorithms to learn about post-processing in GLSL
Certification of Authenticity:
I certify that this is entirely my own work, except where I have given
fully-documented references to the work of others. I understand the
definition and consequences of plagiarism and acknowledge that the assessor
of this assignment may, for the purpose of assessing this assignment:
- Reproduce this assignment and provide a copy to another member of
academic staff; and/or
- Communicate a copy of this assignment to a plagiarism checking
service (which may then retain a copy of this assignment on its
database for the purpose of future plagiarism checking)

Using influence from:

- "The OpenGL® Shading Language, Version 4.60.7" by John Kessenich, Google (Editor and Author) ; Dave Baldwin and Randi Rost
https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.60.pdf

- "OpenGL SuperBible ("Blue Book"), 7ed (2015)" by Graham Sellers, Richard S. Wright Jr., Nicholas Haemel 
https://f.usemind.org/files/b/1/UseMind.ORG_comprehensive-tutorial-and-reference_2015__.pdf

-"GLSL 4.0 Cookbook (2011)" by David Wolff
https://people.inf.elte.hu/plisaai/pdf/David%20Wolff%20-%20OpenGL%204.0%20Shading%20Language%20Cookbook%20(2).pdf

-https://www.shadertoy.com/view/MdKGzG (cube-map camera)

-https://www.shadertoy.com/view/tsByWV (sound tutorial)

- Given code from the Lab 6: Post-Processing assignment page in canvas


*/

//BLOOM BUFFER

// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
//  -> BUFFER A TAB (scene)

//------------------------------------------------------------
// RENDERING FUNCTIONS


//
const float weights[] = float[](0.0024499299678342,
									0.0043538453346397,
									0.0073599963704157,
									0.0118349786570722,
									0.0181026699707781,
                                    0.0263392293891488,
                                    0.0364543006660986,
                                    0.0479932050577658,
                                    0.0601029809166942,
                                    0.0715974486241365,
                                    0.0811305381519717,
                                    0.0874493212267511,
                                    0.0896631113333857,
                                    0.0874493212267511,
                                    0.0811305381519717,
                                    0.0715974486241365,
                                    0.0601029809166942,
                                    0.0479932050577658,
                                    0.0364543006660986,
                                    0.0263392293891488,
                                    0.0181026699707781,
                                    0.0118349786570722,
                                    0.0073599963704157,
                                    0.0043538453346397,
                                    0.0024499299678342);




color4 blurEffect(in sCoord fragCoord)
{
    
    vec4 color;
    
    color4 c = color4(0.0);
    ivec2 p = ivec2(fragCoord.xy) - ivec2(0, weights.length() >> 1);
    
    int i;
    for (i = 0; i < weights.length(); i++)
    {
        ivec2 temp = p + ivec2(0.0, i);
    	c = c + (texelFetch(iChannel0, temp, 0) * weights[i]);
    }
    
    color = c;
    
    return color;
}//reference: "The OpenGL® Shading Language, Version 4.60.7" by John Kessenich, Google (Editor and Author) ; Dave Baldwin and Randi Rost
 //https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.60.pdf

    

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray, in sCoord fragCoord)
{
    sCoord uv = fragCoord / iChannelResolution[0].xy;

    
    return blurEffect(fragCoord);
    
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    
    
    fragColor = calcColor(vp, ray, fragCoord);
   
    
}