/*
Author: Mitko Ivanov
Class: GPR-200-01/02/03: Introduction to Modern Graphics Programming
Assignment: Lab 6: Post-Processing
Date Assigned: 10/09/2020
Due Date: 10/16/2020
Description: Use Shadertoy to follow allong given algorithms to learn about post-processing in GLSL
Certification of Authenticity:
I certify that this is entirely my own work, except where I have given
fully-documented references to the work of others. I understand the
definition and consequences of plagiarism and acknowledge that the assessor
of this assignment may, for the purpose of assessing this assignment:
- Reproduce this assignment and provide a copy to another member of
academic staff; and/or
- Communicate a copy of this assignment to a plagiarism checking
service (which may then retain a copy of this assignment on its
database for the purpose of future plagiarism checking)

Using influence from:

- "The OpenGLÂ® Shading Language, Version 4.60.7" by John Kessenich, Google (Editor and Author) ; Dave Baldwin and Randi Rost
https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.60.pdf

- "OpenGL SuperBible ("Blue Book"), 7ed (2015)" by Graham Sellers, Richard S. Wright Jr., Nicholas Haemel 
https://f.usemind.org/files/b/1/UseMind.ORG_comprehensive-tutorial-and-reference_2015__.pdf

-"GLSL 4.0 Cookbook (2011)" by David Wolff
https://people.inf.elte.hu/plisaai/pdf/David%20Wolff%20-%20OpenGL%204.0%20Shading%20Language%20Cookbook%20(2).pdf

-https://www.shadertoy.com/view/MdKGzG (cube-map camera)

-https://www.shadertoy.com/view/tsByWV (sound tutorial)

- Given code from the Lab 6: Post-Processing assignment page in canvas


*/

// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
//  -> IMAGE TAB (final)

//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // setup
    // test UV for input image
    sCoord uv = fragCoord / iChannelResolution[0].xy;
    
    // TESTING
    // set iChannel0 to 'Misc/Buffer A' and fetch sample
    
    vec4 tex1 = texture(iChannel0, uv);
    vec4 tex2 = texture(iChannel1, uv);
    vec4 tex3 = texture(iChannel2, uv);
    
    
    //buffer a / rotating cube map
    //fragColor = tex1;
    
    //buffer b / bright pass
    //fragColor = tex2;
    
    //buffer c / blur
    //fragColor = tex3;
    
    
    
    //mix composition
    //fragColor = mix(tex1, tex2, tex3);
    
    //addition composition
    //fragColor = tex1 + tex2 + tex3;
    
    //screen composition
    //fragColor = 1.0 - (1.0 - tex1) * (1.0 - tex2) * (1.0 - tex3);
    
    //cool invert color
    fragColor = (1.0 - tex1) * (1.0 - tex2) * (1.0 - tex3);
    
    //Color Burn mode
    //fragColor = (1.0 - (1.0 - tex2)/tex1)/tex3;
    
}