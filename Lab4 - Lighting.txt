/*
Author: Mitko Ivanov
Class: GPR-200-01/02/03: Introduction to Modern Graphics Programming
Assignment: Lab 3: Fragment Shaders & Parallelization
Date Assigned: 09/25/2020
Due Date: 10/02/2020
Description: Use Shadertoy to follow allong given algorithms to learn about lighting in GLSL
Certification of Authenticity:
I certify that this is entirely my own work, except where I have given
fully-documented references to the work of others. I understand the
definition and consequences of plagiarism and acknowledge that the assessor
of this assignment may, for the purpose of assessing this assignment:
- Reproduce this assignment and provide a copy to another member of
academic staff; and/or
- Communicate a copy of this assignment to a plagiarism checking
service (which may then retain a copy of this assignment on its
database for the purpose of future plagiarism checking)

Using influence from:

- "The OpenGLÂ® Shading Language, Version 4.60.7" by John Kessenich, Google (Editor and Author) ; Dave Baldwin and Randi Rost
https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.60.pdf

- Given code from the Lab 3: Lighting assignment page in canvas


*/


// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)
//    point: input 3D vector
vec4 asPoint(in vec3 point)
{
    return vec4(point, 1.0);
}//Given code from the Lab 3: Lighting assignment page in canvas

// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)
//    offset: input 3D vector
vec4 asOffset(in vec3 offset)
{
    return vec4(offset, 0.0);
}//Given code from the Lab 3: Lighting assignment page in canvas

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f
    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);
}//Given code from the Lab 3: Lighting assignment page in canvas

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = asOffset(viewport - eyePosition);
}//Given code from the Lab 3: Lighting assignment page in canvas

struct pointLight
{
    vec4 center;
    vec4 color;
    float intensity; //how far the light will reach
};
    

void initPointLight(out pointLight pLight, in vec3 center, in vec4 color, in float intensity)
{
    pLight.center = asPoint(center);
    pLight.color = color;
    pLight.intensity = intensity;
}

struct sSphere
{
    vec4 center;
    float radius;
};

    
void initSphere(out sSphere sphere, in vec3 center, in float radius)
{
    sphere.center = asPoint(center);
    sphere.radius = radius;
}

//common functions
float lenSq(vec2 x)
{
    return dot(x, x);
}

float lenSq(vec3 x)
{
    return dot(x, x);
}

float square(float x)
{
    return x * x;
}

float power(in float base, in int ex)
{
    for(int i = 0; i < ex; ++i)
    {
        base *= base;
    }
    return base;
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
    //SCENE
    sSphere sphere;
    initSphere(sphere, vec3(0.0, 0.0, -4.0), 0.5);
    
    pointLight light1, light2, light3;
    
    initPointLight(light1, vec3(3.0, -3.0, 0), vec4(1.0, 1.0, 1.0, 1.0), 100.0); 
    initPointLight(light2, vec3(3.0, 3.0, sin(iTime * 10.0)), vec4(1.0, 1.0, 1.0, 1.0), 1.0);
    							//little animation on this one
    initPointLight(light3, vec3(-10.0, -5.0, 0), vec4(1.0, 1.0, 1.0, 1.0), 1.0);
    
    //TEST
    vec3 dp;
    dp.xy = rayDirection.xy - sphere.center.xy;
    float lSq = lenSq(dp.xy),
        rSq = sphere.radius * sphere.radius;
    
    if(length(dp.xy) <= sphere.radius)
    {
        //return vec4(1.0, 0.5, 0.0, 1.0);
        
        //for now 'z' represents 'zSq'
        dp.z = rSq - lSq;
        	//sphere.radius * sphere.radius
        	//- (dp.x * dp.x + dp.y * dp.y);
        
        vec3 position = sphere.center.xyz 
            + vec3(dp.x, dp.y , sqrt(dp.z)); //zSq -> z
        
        vec3 normal = 
            //normalize(position - sphere.center.xyz);
            (position - sphere.center.xyz) / sphere.radius;
        
        //return vec4(normal * 0.5 + 0.5, 1.0);
        
        //point lighting
        vec4 diffuseColor = vec4(normal * 0.5 + 0.5, 1.0);//color for light1 (lambertian reflectance)
        vec4 specularColor = vec4(1.0, 1.0, 1.0, 1.0);//color for light2 (blinn-phong reflectance)
        vec4 specularColor2 = vec4(0.0, 1.0, 1.0, 0.0);//color for light3 (phong reflectance)
        
        //diffuse intensity
        vec3 lightVector1 = light1.center.xyz - position;
        vec3 lightVector2 = light2.center.xyz - position;
        vec3 lightVector3 = light3.center.xyz - position;
        
        vec3 normalLightVector1 = lightVector1 * inversesqrt(lenSq(lightVector1));
        						//multiply by the inverse square root to get the square root
        //lambertian reflectance
        float diffusionCoef = max(0.0, (dot(normal, normalLightVector1)));
        float attenuation = 1.0/(1.0 + length(lightVector1)/light1.intensity + (square(length(lightVector1)) ) / (square(light1.intensity)));
        float diffuseIntensity = diffusionCoef * attenuation;
        
        //phong reflectance
        vec3 viewVector = normalize(rayOrigin.xyz - position);
        vec3 reflectedLightVector = reflect(-normalize(lightVector2), normal);
        float specularCoef = max(0.0, dot(viewVector, reflectedLightVector));
        
        vec3 reflectedLight3Vector = reflect(-normalize(lightVector3), normal);
        float specularCoef2 = max(0.0, dot(viewVector, reflectedLight3Vector));
        
        //highlight exponent
        int highlightExponent = 6;
        int highlightExponent2 = 2;
        //float specularFocus = pow(specularCoef, highlightExponent);
        
        vec3 normalLightVector2 = lightVector2 * inversesqrt(lenSq(lightVector2));
        //blinn-phong reflectance
        vec3 halfwayVector = normalize(normalLightVector2 + viewVector);
        specularCoef = max(0.0, dot(halfwayVector, reflectedLightVector));
        
        float specularFocus = power(specularCoef, highlightExponent); 
        float specularFocus2 = power(specularCoef2, highlightExponent2);
        
        
        //return diffuseColor * diffuseIntensity;
        //return specularColor * specularCoef;
        //return specularColor * specularFocus;
        return (specularColor * specularFocus) + (diffuseColor * diffuseIntensity) + (specularColor2 * specularFocus2);
    }
	
	// BACKGROUND
	const vec3 warm = vec3(0.8, 0.4, 0.2), cool = vec3(0.2, 0.4, 0.8);
	//return vec4(mix(warm, cool, rayDirection.y), 1.0);
    return vec4(0.5);
}//Given code from the Lab 3: Lighting assignment page in canvas

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec3 viewport;
    vec2 ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    fragColor = vec4(0.0);
    
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
    	             viewportHeight, focalLength,
    	             fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);
    
    fragColor += calcColor(rayDirection, rayOrigin);
}//Given code from the Lab 3: Lighting assignment page in canvas